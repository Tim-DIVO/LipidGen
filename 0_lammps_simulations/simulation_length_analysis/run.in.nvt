# ----------------- Init Section -----------------
# system.in.init

units           lj
dimension       3
atom_style      full

# We’ll use a hybrid bond style: 
#   - type=1 => FENE
#   - type=2/3/4 => harmonic
bond_style      hybrid fene harmonic 

# We are no longer using angle potentials for the lipids
angle_style     none

pair_style cosine/squared 3.0

special_bonds   lj 0.0 1.0 1.0

neighbor        0.4 bin
neigh_modify    every 2 delay 0 check yes



# ------------- Atom Definition Section -------------
read_data system_after_min.data



# ---------------- Settings Section -----------------
#include system_adapt.in.settings

##################################################################
# system.in.settings
#
# 1) Bond Coeffs
#    We have 4 bond types in total:
#      - type 1 => adjacency (FENE)
#      - type 2 => bridging unsat (harmonic)
#      - type 3 => bridging sat   (harmonic)
#      - type 4 => bridging chol  (harmonic)
##################################################################
bond_style hybrid fene harmonic 

# adjacency for all species
bond_coeff 1 fene     30.0 1.5 1.0 1.0   # e.g. K=30, Rmax=1.5, epsilon=1.0, sigma=1.0

# bridging for unsat - HALF K-VALUE FROM LITERATURE
bond_coeff 2 harmonic  2.5 4.0   # e.g. k=5, r0=4.0

# bridging for sat - HALF K-VALUE FROM LITERATURE
bond_coeff 3 harmonic 12.5 4.0   # e.g. k=25, r0=4.0

# bridging for chol - HALF K-VALUE FROM LITERATURE
bond_coeff 4 harmonic 5.0 4.0   # e.g. k=10, r0=4.0


##################################################################
# 2) Pair Coeffs for 10 atom types:
#
#   We will now use "pair_style cosine/squared" with:
#       - eps = 1.0 for all pairs
#       - sigma_ij = (sigma_i + sigma_j)/2 via LB mixing
#       - cutoff = sigma_ij + w_c, where w_c depends on pair
#       - "wca" keyword for purely repulsive interactions
#
#   Radii for each bead type:
#       lipid heads (types 1,8) => rh = 0.95
#       lipid tails (type 2)   => rt = 1.0
#       lipid mids  (3..6)     => rm = 1.0
#       chol head   (type 9)   => ch = 0.76
#       chol mid    (type 7)   => cm = 0.80
#       chol tail   (type 10)  => ct = 0.80
#
#   Hence single-bead sigmas:
#       sigma(1)=0.95, sigma(8)=0.95, sigma(9)=0.76,
#       sigma(2)=1.0,
#       sigma(3)=1.0, sigma(4)=1.0, sigma(5)=1.0, sigma(6)=1.0,
#       sigma(7)=0.80, sigma(10)=0.80
#
#   For purely repulsive (Heads or cross-leaflet mids), we do:
#       pair_coeff i j 1.0 sigma_ij sigma_ij wca
#   i.e. cutoff = sigma_ij, so no cos² tail.
#
#   For attractive cos² pairs, we do:
#       pair_coeff i j 1.0 sigma_ij (sigma_ij + w_c)
#   with w_c as in the old table:
#       tail-tail, unsat-unsat, sat-sat, tail-chol, chol-chol => w_c=1.6
#       unsat–sat => w_c=1.4
#       unsat–chol => w_c=1.68
#       sat–chol => w_c=1.75
#
##################################################################

pair_style cosine/squared 3.0

# ----------------------------------------------------------------
# (A) Head–anything => purely repulsive WCA
#     Heads = types 1,8,9
# ----------------------------------------------------------------

# 1 with 1..10
pair_coeff 1 1 1.0  1.0663  1.0663 wca
pair_coeff 1 2 1.0  1.0934 1.0934 wca
pair_coeff 1 3 1.0  1.0934 1.0934 wca
pair_coeff 1 4 1.0  1.0934 1.0934 wca
pair_coeff 1 5 1.0  1.0934 1.0934 wca
pair_coeff 1 6 1.0  1.0934 1.0934 wca
pair_coeff 1 7 1.0  0.9807 0.9807 wca
pair_coeff 1 8 1.0  1.0663 1.0663 wca
pair_coeff 1 9 1.0  0.9592 0.9592 wca
pair_coeff 1 10 1.0  0.9807 0.9807 wca

# 2 with 8..9
pair_coeff 2 8  1.0  1.0934 1.0934 wca
pair_coeff 2 9  1.0  0.9863 0.9863 wca

# 3 with 8..9
pair_coeff 3 8  1.0  1.0934 1.0934 wca
pair_coeff 3 9  1.0  0.9863 0.9863 wca

# 4 with 8..9
pair_coeff 4 8  1.0  1.0934 1.0934 wca
pair_coeff 4 9  1.0  0.9863 0.9863 wca

# 5 with 8..9
pair_coeff 5 8  1.0  1.0934 1.0934 wca
pair_coeff 5 9  1.0  0.9863 0.9863 wca

# 6 with 8..9
pair_coeff 6 8  1.0  1.0934 1.0934 wca
pair_coeff 6 9  1.0  0.9863 0.9863 wca

# 7 with 8..9
pair_coeff 7 8  1.0  0.9807 0.9807 wca
pair_coeff 7 9  1.0  0.8739 0.8739 wca

# 8 with 8..10
pair_coeff 8 8  1.0  1.0663 1.0663 wca
pair_coeff 8 9  1.0  0.9592 0.9592 wca
pair_coeff 8 10 1.0  0.9807 0.9807 wca

# 9 with 9..10
pair_coeff 9 9  1.0  0.8531 0.8531 wca
pair_coeff 9 10 1.0  0.8739 0.8739 wca

# ----------------------------------------------------------------
# (B) Cross-leaflet mid–mid => purely repulsive WCA
# ----------------------------------------------------------------
pair_coeff 3 5 1.0 1.1225 1.1225 wca
pair_coeff 3 6 1.0 1.1225 1.1225 wca
pair_coeff 4 5 1.0 1.1225 1.1225 wca
pair_coeff 4 6 1.0 1.1225 1.1225 wca

# ----------------------------------------------------------------
# (C) Everything else => cos² with w_c from the old table
# ----------------------------------------------------------------

# (C1) tail-tail => (2,2), w_c=1.6
pair_coeff 2 2 1.0 1.1225 2.7225 wca

# (C2) unsat–unsat => w_c=1.6
pair_coeff 2 3 1.0 1.1225 2.7225 wca
pair_coeff 3 3 1.0 1.1225 2.7225 wca
pair_coeff 2 5 1.0 1.1225 2.7225 wca
pair_coeff 5 5 1.0 1.1225 2.7225 wca

# (C3) sat–sat => w_c=1.6
pair_coeff 2 4 1.0 1.1225 2.7225 wca
pair_coeff 4 4 1.0 1.1225 2.7225 wca
pair_coeff 2 6 1.0 1.1225 2.7225 wca
pair_coeff 6 6 1.0 1.1225 2.7225 wca

# (C4) tail–chol => w_c=1.6
#   sigma_2 = 1.1225, sigma_7 = 0.898 => avg = 1.010 => cutoff = 2.610
pair_coeff 2 7  1.0 1.010 2.610 wca
pair_coeff 2 10 1.0 1.010 2.610 wca

# (C5) chol–chol => w_c=1.6
#   sigma_7 = 0.898 => cutoff = 2.498
pair_coeff 7 7   1.0 0.898 2.498 wca
pair_coeff 7 10  1.0 0.898 2.498 wca
pair_coeff 10 10 1.0 0.898 2.498 wca

# (C6) unsat–sat => w_c=1.4
pair_coeff 3 4 1.0 1.1225 2.5225 wca
pair_coeff 5 6 1.0 1.1225 2.5225 wca

# (C7) unsat–chol => w_c=1.68
#   sigma_3 = 1.1225, sigma_7 = 0.898 => avg = 1.010 => cutoff = 2.690
pair_coeff 3 7  1.0 1.010 2.690 wca
pair_coeff 3 10 1.0 1.010 2.690 wca
pair_coeff 5 7  1.0 1.010 2.690 wca
pair_coeff 5 10 1.0 1.010 2.690 wca

# (C8) sat–chol => w_c=1.75
#   sigma_4 = 1.1225, sigma_7 = 0.898 => avg = 1.010 => cutoff = 2.760
pair_coeff 4 7  1.0 1.010 2.760 wca
pair_coeff 4 10 1.0 1.010 2.760 wca
pair_coeff 6 7  1.0 1.010 2.760 wca
pair_coeff 6 10 1.0 1.010 2.760 wca






# ---------------------------------------------------------------
# Increase communication cutoff to ensure proper ghost atom exchange.
comm_modify cutoff 7.0

# ---- Define Global Variables to be Dumped ----
variable ke   equal ke         # kinetic energy
variable pe   equal pe         # potential energy
variable tot  equal etotal     # total energy
variable temp equal temp       # temperature

# Define a custom variable for the current simulation step
variable simstep equal step

# ---- Normal Coordinate Trajectory Dump ----
# Dump atom id, type, and positions every 1000 steps.
dump           1 all custom 1000 full_traj_adapt.lammpstrj id type x y z
dump_modify    1 sort id

# ---- Global Quantities Dump ----
# Print global quantities every 1000 steps to a separate file.
fix global_print all print 1000 "Step: ${simstep}  KE: ${ke}  PE: ${pe}  Tot: ${tot}  Temp: ${temp}" file global_adapt.out screen no

# ----------- Define Groups for MSD Computation -----------
# Groups for particle types 1, 8, and 9.
group type1 type 1
group type8 type 8
group type9 type 9

# ----------- RDF Computation -----------
# Compute the RDF using 50 bins.
# Four pairings are specified:
#   1 8  -> particles of type 1 with type 8
#   1 9  -> particles of type 1 with type 9
#   8 9  -> particles of type 8 with type 9
#   * *  -> all pairs (i.e., all particle types)
compute myRDF all rdf 50 1 8 1 9 8 9 * *
# Output the computed RDF array every 100 timesteps.
fix rdf_out all ave/time 1000 1 1000 c_myRDF[*] file rdf_adapt.out mode vector

# ----------- MSD Computations -----------
# Compute the mean-squared displacement (MSD) for:
#  1) All atoms,  2) Atoms of type 1,  3) Atoms of type 8,  4) Atoms of type 9.
compute msd_all all msd
compute msd_1 type1 msd
compute msd_8 type8 msd
compute msd_9 type9 msd

# Define variables to extract only the 4th component (<dr^2>) from each MSD compute.
variable msd_all_val equal c_msd_all[4]
variable msd_1_val   equal c_msd_1[4]
variable msd_8_val   equal c_msd_8[4]
variable msd_9_val   equal c_msd_9[4]

# Output these r² displacement values every 100 timesteps.
fix msd_out all ave/time 1000 1 1000 v_msd_all_val v_msd_1_val v_msd_8_val v_msd_9_val file msd_adapt.out mode scalar


# ------------------ Additional Thermo Output ------------------
thermo 500
thermo_style custom step temp ke pe etotal


# ------------------ Run Section ------------------
timestep 0.01

velocity all create 1.4 12345
fix flangevin all langevin 1.4 1.4 10.0 12345   # apply Langevin thermostat
fix nve all nve                                 # integrate the motion

run 1000000

write_data system_after_nvt_adapt.data
